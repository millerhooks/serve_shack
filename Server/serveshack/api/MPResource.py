import sys, traceback, string

from django.views.debug import ExceptionReporter
from django.core.mail import send_mail, EmailMessage
from django.http import HttpResponse
from django.utils import simplejson

from piston.utils import FormValidationError, HttpStatusCode
from piston.resource import Resource

"""
This file contains the standard Mutual Mobile error handling logic
for django-piston based apps. You can add your own exception types
by inheriting from the classes shown here. Doing so will cause the
exceptions to be handled in standardized ways. See the README file
for additional details.
"""

def form_errors(form):
    """
    This is an optional utility function for pretty error handling.
    """
    error_dict = dict([(k.capitalize(), [str(e) for e in v]) for k,v in form.errors.items()])
    if len(error_dict) == 1:
        key, description = error_dict.items()[0]
        name = key + " Error"
        return (name, description)

    error_desc = ""
    delim = ","
    for key in error_dict.keys():
        if len(error_desc) > 0:
            delim = ";"
        error_array = error_dict[key]
        error_message = string.join( error_array )
        error_desc += "%s %s: %s" % (delim, key, error_message)
    if len(error_desc) < 1:
        error_desc += "%s Invalid form has no error keys" % (delim)
    return ("Validation Error", error_desc)

def JSONErrorResponse( name="Error", description="description unavailable", status=400, domain="USR" ):
    """
    This function packs USR style errors as expected by the automatic
    client-side error handler. The user will see the name and the description,
    so take care to make these meaningful and correct.
    """
    error = { 'domain': domain, 'name': name, 'description': description }
    result = { 'result': None, 'error': error }
    json_content = simplejson.dumps( result )
    return HttpResponse( json_content, status=status, content_type='application/json; charset=utf-8' )


#################################################################
# Exception Classes
#################################################################

class APIGeneralError(Exception):
    """
    Root Exception class for all MM piston API errors.
    All API errors should derive from this class.
    The status is the http error code number.
    The domain is one of:
        "USR" -- user visible error
        "API" -- an error that the client is expected to handle
        "INT" -- a serious but trapped server error
        "EXC" -- a serious untrapped server error
    """
    def __init__(self, name, description, status, domain):
        self.api_error_name = name
        self.api_error_description = description
        self.api_error_status = status
        self.api_error_domain = domain
 
class APIUserError(APIGeneralError):
    def __init__(self, name, description):
        self.api_error_name = name
        self.api_error_description = description
        self.api_error_status = 400
        self.api_error_domain = "USR"

class APIRequestError(APIGeneralError):
    def __init__(self, description):
        self.api_error_name = "Error"
        self.api_error_description = description
        self.api_error_status = 400
        self.api_error_domain = "API"

class APINotLoggedInError(APIUserError):
    def __init__(self):
        self.api_error_name = "Login Error"
        self.api_error_description = "You need to login in order to do that. If you don't have an account, then you need to register."
        self.api_error_status = 400
        self.api_error_domain = "USR"

"""
You can create your own custom errors. Here is an example:
 
class APINoActiveSubscriptionError(APIUserError):
    def __init__(self):
        self.api_error_name = "Subscription Error"
        self.api_error_description = "You need to have an active subscription to do that. Please purchase one."
        self.api_error_status = 400
        self.api_error_domain = "USR"
"""

class APIInternalError(APIGeneralError):
    def __init__(self, description):
        self.api_error_name = "Internal Error"
        self.api_error_description = description
        self.api_error_status = 500
        self.api_error_domain = "INT"


"""
Use this version of Resource to pick up the custom MM error_handler.
"""

class MPResource(Resource):
    def error_handler(self, error, request, meth):
        """
        A decorator that generates our preferred output formats
        for two common cases:
            -- APIGeneralError (you can raise this or a descendent in API code)
    	       -- FormValidationError (generated by 'validate' decorator)
        """
        if isinstance(error, FormValidationError):
            """
            Optional 'beatified' form error handling.
            Comment this if clause out if you want the normal output.
            """
            name, description = form_errors(error.form)
            return JSONErrorResponse( name, description )

        if isinstance(error, APIUserError) or isinstance(error, APIRequestError):
            return JSONErrorResponse( error.api_error_name, error.api_error_description, error.api_error_status, error.api_error_domain )

        # If we got here, the we have a serious server error.
        #
        # log this whether or not we send email
        exc_type, exc_value, tb = sys.exc_info()
        rep = ExceptionReporter(request, exc_type, exc_value, tb.tb_next)
        # add logging here
        traceback.print_exc()
        traceback.print_tb(tb)
        from django.conf import settings
        if getattr(settings, 'PISTON_EMAIL_ERRORS', False):
            subject = "iCoupon crash report"
            html = rep.get_traceback_html()
            message = EmailMessage(settings.EMAIL_SUBJECT_PREFIX+subject,
                            html, settings.SERVER_EMAIL,
                            [ admin[1] for admin in settings.ADMINS ])
            message.content_subtype = 'html'
            message.send(fail_silenetly=True)
 
        if isinstance(error, APIInternalError):
            return JSONErrorResponse( error.api_error_name, error.api_error_description, error.api_error_status, error.api_error_domain )

        return JSONErrorResponse( "Unknown Exception", "traceback logged", 500, "EXC" )

